name: Cross-Platform Build & Release

on:
  push:
    tags:
      - "v*"   # Runs only when you push tags like v1.0, v2.0 etc.

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            artifact_name: TrueConnect-linux
            asset_name: TrueConnect-linux.tar.gz
          - os: windows-latest
            artifact_name: TrueConnect-win.exe
            asset_name: TrueConnect-win.exe
          - os: macos-latest
            artifact_name: TrueConnect-mac.dmg
            asset_name: TrueConnect-mac.dmg

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller pandas fpdf2

      # Debug: List files before build
      - name: Debug - List files before build (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Current directory contents:"
          dir
          echo "Python version:"
          python --version
          echo "PyInstaller version:"
          pyinstaller --version
        shell: cmd

      # Debug: List files before build (Unix)
      - name: Debug - List files before build (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Python version:"
          python --version
          echo "PyInstaller version:"
          pyinstaller --version
        shell: bash

      # Windows Build
      - name: Build Windows Executable
        if: runner.os == 'Windows'
        run: |
          echo "Building Windows executable..."
          set VERSION=%GITHUB_REF_NAME:v=%
          set VERSION=%VERSION:.=-%
          echo "Version: %VERSION%"
          pyinstaller --onefile --hidden-import=fpdf --hidden-import=fpdf.fpdf --hidden-import=pandas main.py
          echo "Contents of dist folder:"
          dir dist
          if exist "dist\main.exe" (
            move "dist\main.exe" "dist\trueconnect-win-%VERSION%.exe"
            echo "Successfully renamed to trueconnect-win-%VERSION%.exe"
          ) else (
            echo "ERROR: main.exe not found in dist folder"
            exit 1
          )
        shell: cmd

      # Linux Build
      - name: Build Linux Executable
        if: runner.os == 'Linux'
        run: |
          echo "Building Linux executable..."
          VERSION=${GITHUB_REF_NAME#v}  # Remove 'v' prefix
          VERSION=${VERSION//./-}       # Replace dots with hyphens
          echo "Version: $VERSION"
          pyinstaller --onefile --hidden-import=fpdf --hidden-import=fpdf.fpdf --hidden-import=pandas main.py
          echo "Contents of dist folder:"
          ls -la dist/
          if [ -f "dist/main" ]; then
            mv dist/main dist/trueconnect-linux-$VERSION
            tar -czvf dist/trueconnect-linux-$VERSION.tar.gz -C dist trueconnect-linux-$VERSION
            echo "Successfully created trueconnect-linux-$VERSION.tar.gz"
          else
            echo "ERROR: main executable not found in dist folder"
            exit 1
          fi
        shell: bash

      # macOS Build
      - name: Build macOS Executable
        if: runner.os == 'macOS'
        run: |
          echo "Building macOS executable..."
          VERSION=${GITHUB_REF_NAME#v}  # Remove 'v' prefix
          VERSION=${VERSION//./-}       # Replace dots with hyphens
          echo "Version: $VERSION"
          pyinstaller --onefile --hidden-import=fpdf --hidden-import=fpdf.fpdf --hidden-import=pandas main.py
          echo "Contents of dist folder:"
          ls -la dist/
          if [ -f "dist/main" ]; then
            mv dist/main dist/trueconnect-mac-$VERSION
            mkdir -p dist/dmg
            cp dist/trueconnect-mac-$VERSION dist/dmg/
            hdiutil create -volname "TrueConnect" -srcfolder dist/dmg -ov -format UDZO dist/trueconnect-mac-$VERSION.dmg
            echo "Successfully created trueconnect-mac-$VERSION.dmg"
          else
            echo "ERROR: main executable not found in dist folder"
            exit 1
          fi
        shell: bash

      # Debug: List final files
      - name: Debug - List final files (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "Final dist folder contents:"
          if exist dist dir dist
        shell: cmd

      - name: Debug - List final files (Unix)
        if: runner.os != 'Windows'
        run: |
          echo "Final dist folder contents:"
          if [ -d "dist" ]; then ls -la dist/; fi
        shell: bash

      # Upload artifacts conditionally
      - name: Upload Windows Release Assets
        if: runner.os == 'Windows'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux Release Assets
        if: runner.os == 'Linux'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload macOS Release Assets
        if: runner.os == 'macOS'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}